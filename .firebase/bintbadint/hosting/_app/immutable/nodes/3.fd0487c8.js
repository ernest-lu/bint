import{g as P,e as b}from"../chunks/firebase.c14d304d.js";import{s as j,d as m,n as p}from"../chunks/scheduler.afdc9194.js";import{S as y,i as S,d as w,v as x,j as _,o as E,k as f,l as h,p as O,g as d,a as k,z as g,q}from"../chunks/index.a17f34e5.js";async function z({params:n}){const t=await P(n.id);if(t.message!=="success")throw b(404);return{content:t.content}}const A=Object.freeze(Object.defineProperty({__proto__:null,load:z},Symbol.toStringTag,{value:"Module"})),v="src/routes/paste/[id]/+page.svelte";function l(n){let t,a,s=n[0].content+"",r;const o={c:function(){t=_("main"),a=_("p"),r=E(s),this.h()},l:function(e){t=f(e,"MAIN",{});var i=h(t);a=f(i,"P",{});var u=h(a);r=O(u,s),u.forEach(d),i.forEach(d),this.h()},h:function(){m(a,v,5,4,52),m(t,v,4,0,41)},m:function(e,i){k(e,t,i),g(t,a),g(a,r)},p:function(e,[i]){i&1&&s!==(s=e[0].content+"")&&q(r,s)},i:p,o:p,d:function(e){e&&d(t)}};return w("SvelteRegisterBlock",{block:o,id:l.name,type:"component",source:"",ctx:n}),o}function C(n,t,a){let{$$slots:s={},$$scope:r}=t;x("Page",s,[]);let{data:o}=t;n.$$.on_mount.push(function(){o===void 0&&!("data"in t||n.$$.bound[n.$$.props.data])&&console.warn("<Page> was created without expected prop 'data'")});const c=["data"];return Object.keys(t).forEach(e=>{!~c.indexOf(e)&&e.slice(0,2)!=="$$"&&e!=="slot"&&console.warn(`<Page> was created with unknown prop '${e}'`)}),n.$$set=e=>{"data"in e&&a(0,o=e.data)},n.$capture_state=()=>({data:o}),n.$inject_state=e=>{"data"in e&&a(0,o=e.data)},t&&"$$inject"in t&&n.$inject_state(t.$$inject),[o]}class B extends y{constructor(t){super(t),S(this,t,C,l,j,{data:0}),w("SvelteRegisterComponent",{component:this,tagName:"Page",options:t,id:l.name})}get data(){throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set data(t){throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}export{B as component,A as universal};
